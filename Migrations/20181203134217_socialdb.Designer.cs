// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quizartsocial_backend.Models;

namespace backEnd.Migrations
{
    [DbContext(typeof(SocialContext))]
    [Migration("20181203134217_socialdb")]
    partial class socialdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("quizartsocial_backend.Models.Comment", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("comment");

                    b.Property<int>("postId");

                    b.Property<string>("userId");

                    b.HasKey("commentId");

                    b.HasIndex("postId");

                    b.HasIndex("userId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("quizartsocial_backend.Models.Post", b =>
                {
                    b.Property<int>("postId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("post");

                    b.Property<int>("topicId");

                    b.Property<string>("userId");

                    b.HasKey("postId");

                    b.HasIndex("topicId");

                    b.HasIndex("userId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("quizartsocial_backend.Models.Topic", b =>
                {
                    b.Property<int>("topicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("topicImage");

                    b.Property<string>("topicName");

                    b.HasKey("topicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("quizartsocial_backend.Models.User", b =>
                {
                    b.Property<string>("userId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("score");

                    b.Property<string>("userImage");

                    b.Property<string>("userName");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("quizartsocial_backend.Models.Comment", b =>
                {
                    b.HasOne("quizartsocial_backend.Models.Post")
                        .WithMany("comments")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("quizartsocial_backend.Models.User")
                        .WithMany("comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("quizartsocial_backend.Models.Post", b =>
                {
                    b.HasOne("quizartsocial_backend.Models.Topic")
                        .WithMany("posts")
                        .HasForeignKey("topicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("quizartsocial_backend.Models.User")
                        .WithMany("posts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
